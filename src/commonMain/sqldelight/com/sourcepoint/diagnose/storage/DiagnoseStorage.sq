import com.sourcepoint.diagnose.storage.StringList;
import com.sourcepoint.diagnose.storage.EventFlags;
import com.sourcepoint.diagnose.storage.DiagnoseConfig;


CREATE TABLE Config (
  configTime INTEGER PRIMARY KEY NOT NULL,
  version TEXT NOT NULL,
  value TEXT AS DiagnoseConfig NOT NULL
);

CREATE TABLE Vendor (
  vendorId TEXT PRIMARY KEY NOT NULL,
  kind INTEGER NOT NULL,
  domain TEXT NOT NULL UNIQUE,
  iabId INTEGER
);

CREATE INDEX vendor_domain ON Vendor(domain);

CREATE TABLE ConsentString (
  consentStringId INTEGER PRIMARY KEY NOT NULL,
  kind INTEGER NOT NULL,
  value TEXT NOT NULL,
  UNIQUE(kind, value)
);

CREATE TABLE StateString (
  stateStringId INTEGER PRIMARY KEY NOT NULL,
  value TEXT AS StringList NOT NULL UNIQUE
);

CREATE TABLE EventV1 (
  eventTime INTEGER PRIMARY KEY NOT NULL,
  flags INTEGER AS EventFlags NOT NULL,
  vendorId TEXT,
  consentStringId INTEGER,
  stateStringId INTEGER,
  FOREIGN KEY(stateStringId) REFERENCES StateString(stateStringId),
  FOREIGN KEY(consentStringId) REFERENCES ConsentString(consentStringId),
  FOREIGN KEY(vendorId) REFERENCES Vendor(vendorId)
);

addConfig:
INSERT INTO Config VALUES ?;

getLatestConfigTime:
SELECT
    MAX(configTime)
FROM
    Config
WHERE
    version = ?;

getLatestConfig:
SELECT
    *
FROM
    Config
WHERE
    configTime = ( SELECT MAX(configTime) FROM Config )
AND
    version = ?;

clearOldConfigs:
DELETE FROM
    Config
WHERE
    configTime < ( SELECT MAX(configTime) FROM Config )
;

insertVendor:
INSERT INTO Vendor
VALUES ?
ON CONFLICT(vendorId) DO UPDATE
SET domain = excluded.domain,
    iabId = excluded.iabId
;

getVendorDatabase:
SELECT * FROM Vendor;

insertEvent:
INSERT INTO EventV1 VALUES ?;

getEventsOnOrBefore:
SELECT
    *
FROM
    EventV1
WHERE
    eventTime <= ?
ORDER BY
    eventTime ASC;

clearEvents:
DELETE FROM
    EventV1
WHERE
    eventTime <= ?
AND
    eventTime NOT IN ?
;

clearUnusedStates:
DELETE FROM StateString
WHERE stateStringId NOT IN (SELECT stateStringId FROM EventV1);

clearUnusedConsentStrings:
DELETE FROM ConsentString
WHERE consentStringId NOT IN (SELECT consentStringId FROM EventV1);

selectVendorById:
SELECT * FROM Vendor WHERE vendorId IN ?;

selectStateStringById:
SELECT * FROM StateString WHERE stateStringId IN ?;

upsertStateString:
INSERT INTO StateString
VALUES ?
ON CONFLICT(value) DO UPDATE
SET stateStringId = stateStringId
RETURNING stateStringId
;

upsertConsentString:
INSERT INTO ConsentString
VALUES ?
ON CONFLICT(kind, value) DO UPDATE
SET consentStringId = consentStringId
RETURNING consentStringId
;

selectConsentStringById:
SELECT * FROM ConsentString WHERE consentStringId IN ?;
